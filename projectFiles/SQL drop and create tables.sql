-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


DROP TABLE IF EXISTS public."Categories";
DROP TABLE IF EXISTS public."Comments";
DROP TABLE IF EXISTS public."Users";
DROP TABLE IF EXISTS public."Tags";
DROP TABLE IF EXISTS public."Posts";
DROP TABLE IF EXISTS public."Post_Tags";

CREATE TABLE IF NOT EXISTS public."Categories"
(
    id integer NOT NULL DEFAULT nextval('"Categories_id_seq"'::regclass),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    active boolean NOT NULL,
    CONSTRAINT "Categories_pkey" PRIMARY KEY (id),
    CONSTRAINT "Categories_description_key" UNIQUE (description)
);



CREATE TABLE IF NOT EXISTS public."Comments"
(
    id integer NOT NULL DEFAULT nextval('"Comments_id_seq"'::regclass),
    comment character varying(255) COLLATE pg_catalog."default" NOT NULL,
    upvote integer NOT NULL,
    published boolean NOT NULL,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL,
    "postId" integer,
    "userId" integer,
    CONSTRAINT "Comments_pkey" PRIMARY KEY (id),
    CONSTRAINT "Comments_upvote_key" UNIQUE (upvote)
);


CREATE TABLE IF NOT EXISTS public."Post_Tags"
(
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL,
    "PostId" integer NOT NULL,
    "TagId" integer NOT NULL,
    CONSTRAINT "Post_Tags_pkey" PRIMARY KEY ("PostId", "TagId")
);


CREATE TABLE IF NOT EXISTS public."Posts"
(
    id integer NOT NULL DEFAULT nextval('"Posts_id_seq"'::regclass),
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    picture text COLLATE pg_catalog."default",
    body text COLLATE pg_catalog."default" NOT NULL,
    published boolean NOT NULL,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL,
    "categoryId" integer,
    "userId" integer,
    CONSTRAINT "Posts_pkey" PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS public."Tags"
(
    id integer NOT NULL DEFAULT nextval('"Tags_id_seq"'::regclass),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Tags_pkey" PRIMARY KEY (id)
);



CREATE TABLE IF NOT EXISTS public."Users"
(
    id integer NOT NULL DEFAULT nextval('"Users_id_seq"'::regclass),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    pass character varying(255) COLLATE pg_catalog."default" NOT NULL,
    role character varying(255) COLLATE pg_catalog."default" NOT NULL,
    timestamploggedin timestamp with time zone,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "Users_pkey" PRIMARY KEY (id),
    CONSTRAINT "Users_email_key" UNIQUE (email)
);

ALTER TABLE IF EXISTS public."Comments"
    ADD CONSTRAINT "Comments_postId_fkey" FOREIGN KEY ("postId")
    REFERENCES public."Posts" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public."Post_Tags"
    ADD CONSTRAINT "Post_Tags_PostId_fkey" FOREIGN KEY ("PostId")
    REFERENCES public."Posts" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Posts"
    ADD CONSTRAINT "Posts_categoryId_fkey" FOREIGN KEY ("categoryId")
    REFERENCES public."Categories" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public."Tags"
    ADD FOREIGN KEY (id)
    REFERENCES public."Post_Tags" ("TagId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Users"
    ADD FOREIGN KEY (id)
    REFERENCES public."Comments" ("userId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Users"
    ADD FOREIGN KEY (id)
    REFERENCES public."Posts" ("userId") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;